#include<bits/stdc++.h>
using namespace std;
class MyLinkedList {
public:
    // 定义链表节点结构体
    struct LinkedNode {
        int val;
        LinkedNode* next;
        LinkedNode() : val(0), next(nullptr) {}
        LinkedNode(int x) : val(x), next(nullptr) {}
        LinkedNode(int x, LinkedNode* next) : val(x), next(next) {}
    };

    // 初始化链表
    MyLinkedList() {
        _dummyHead = new LinkedNode(0); // 这里定义的头结点 是一个虚拟头结点，而不是真正的链表头结点
        _size = 0;
    }

    // 获取到第index个节点数值，如果index是非法数值直接返回-1， 注意index是从0开始的，第0个节点就是头结点
    int get(int index) {
        if (index > (_size - 1) || index < 0) {
            return -1;
        }
        LinkedNode* cur = _dummyHead->next;
        while (index--) { // 如果--index 就会陷入死循环
            cur = cur->next;
        }
        return cur->val;
    }

    // 在链表最前面插入一个节点，插入完成后，新插入的节点为链表的新的头结点
    void addAtHead(int val) {
        LinkedNode* newNode = new LinkedNode(val);
        newNode->next = _dummyHead->next;
        _dummyHead->next = newNode;
        _size++;
    }

    // 在链表最后面添加一个节点
    void addAtTail(int val) {
        LinkedNode* newNode = new LinkedNode(val);
        LinkedNode* cur = _dummyHead;
        while (cur->next != nullptr) {
            cur = cur->next;
        }
        cur->next = newNode;
        _size++;
    }

    // 在第index个节点之前插入一个新节点，例如index为0，那么新插入的节点为链表的新头节点。
    // 如果index 等于链表的长度，则说明是新插入的节点为链表的尾结点
    // 如果index大于链表的长度，则返回空
    // 如果index小于0，则在头部插入节点
    void addAtIndex(int index, int val) {

        if (index > _size) return;
        if (index < 0) index = 0;
        LinkedNode* newNode = new LinkedNode(val);
        LinkedNode* cur = _dummyHead;
        while (index--) {
            cur = cur->next;
        }
        newNode->next = cur->next;
        cur->next = newNode;
        _size++;
    }

    // 删除第index个节点，如果index 大于等于链表的长度，直接return，注意index是从0开始的
    void deleteAtIndex(int index) {
        if (index >= _size || index < 0) {
            return;
        }
        LinkedNode* cur = _dummyHead;
        while (index--) {
            cur = cur->next;
        }
        LinkedNode* tmp = cur->next;
        cur->next = cur->next->next;
        delete tmp;
        _size--;
    }
    //删除链表的倒数第N个节点
    void removeNthFromEnd(int n) {
        LinkedNode* slow = _dummyHead;
        LinkedNode* fast = _dummyHead;
        while (n-- && fast != nullptr) {
            fast = fast->next;
        }
        fast = fast->next; // fast再提前走一步，因为需要让slow指向删除节点的上一个节点
        while (fast != NULL) {
            fast = fast->next;
            slow = slow->next;
        }
        slow->next = slow->next->next;

        // ListNode *tmp = slow->next;  C++释放内存的逻辑
        // slow->next = tmp->next;
        // delete nth;

    }
    //两两交换链表中的节点
    void swapPairs() {
        LinkedNode* cur = _dummyHead;
        while (cur->next != nullptr && cur->next->next != nullptr) {
            LinkedNode* tmp = cur->next; // 记录临时节点
            LinkedNode* tmp1 = cur->next->next->next; // 记录临时节点

            cur->next = cur->next->next;    // 步骤一
            cur->next->next = tmp;          // 步骤二
            cur->next->next->next = tmp1;   // 步骤三

            cur = cur->next->next; // cur移动两位，准备下一轮交换
        }
    }
    //反转链表,双指针法
    void reverseLinkedList() {
        LinkedNode* prev = nullptr;
        LinkedNode* curr = _dummyHead->next;
        while (curr != nullptr) {
            LinkedNode* next = curr->next;
            curr->next = prev;
            prev = curr;
            curr = next;
        }
        _dummyHead->next = prev;
    }
    // 打印链表
    void printLinkedList() {
        LinkedNode* cur = _dummyHead;
        while (cur->next != nullptr) {
            cout << cur->next->val << " ";
            cur = cur->next;
        }
        cout << endl;
    }
private:
    int _size;
    LinkedNode* _dummyHead;
};
int main() {
    MyLinkedList* linkedList = new MyLinkedList();
    linkedList->addAtHead(1);
    linkedList->addAtHead(4);
    linkedList->addAtHead(8);
    linkedList->addAtTail(3);
    linkedList->addAtTail(3);
    linkedList->addAtTail(9);
    linkedList->addAtTail(7);
    cout << "初始链表:" << endl;
    linkedList->printLinkedList();
    //在下标为1的节点插入新的节点,其值为2
    linkedList->addAtIndex(1, 2);
    cout << "添加具体下标节点后的链表:" << endl;
    linkedList->printLinkedList();
    //删除第1个节点
    linkedList->deleteAtIndex(5);
    cout << "删除第1个节点后的链表:" << endl;
    linkedList->printLinkedList();
    //删除链表的倒数第5个节点
    linkedList->removeNthFromEnd(5);
    cout << "删除链表的倒数第5个节点后的链表:" << endl;
    linkedList->printLinkedList();
    //两两交换链表中的节点
    linkedList->swapPairs();
    cout << "交换之后的链表:" << endl;
    linkedList->printLinkedList();
    //反转链表
    linkedList->reverseLinkedList();
    cout << "反转之后的链表:" << endl;
    linkedList->printLinkedList();
    return 0;
}